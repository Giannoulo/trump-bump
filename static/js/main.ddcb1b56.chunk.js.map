{"version":3,"sources":["Components/Header.js","Components/Controls.js","Assets/trumpIcon2.svg","Assets/trump.svg","Assets/10-BILLION.mp3","Components/TrumpIcon.js","Utils/GameBoardFunctions.js","Components/GameBoard.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","Redux/store.js","serviceWorker.js","index.js"],"names":["Header","className","id","Controls","TrumpIcon","props","onClick","clickCallback","Audio","trumpHit","play","src","TrumpSvg2","alt","draggable","classNameProp","createClassNameArray","numberOfIcons","max","classNameArray","Array","from","length","element","Math","floor","random","GameBoard","useState","targetClicked","setTargetClicked","iconsJSX","setIconsJSX","useEffect","console","log","map","index","App","cursor","setCursor","setTimeout","fetchCount","amount","Promise","resolve","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ddcb1b56.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"container\" id=\"header-row\">\n      <div id=\"header-col\">Trump Bump</div>\n    </div>\n  );\n};\nexport default Header;\n","import React from \"react\";\n\nconst Controls = () => {\n  let score = 24;\n  let lives = 3;\n  let timeleft = 20;\n  return (\n    <div className=\"container\" id=\"controls-div\">\n      <span>{`Score: ${score} Time: ${timeleft}s Lives: ${lives}`}</span>\n    </div>\n  );\n};\nexport default Controls;\n","export default __webpack_public_path__ + \"static/media/trumpIcon2.5c01a39c.svg\";","export default __webpack_public_path__ + \"static/media/trump.43f0d5f3.svg\";","export default __webpack_public_path__ + \"static/media/10-BILLION.f1f8a5f9.mp3\";","import React from \"react\";\nimport TrumpSvg from \"../Assets//trump.svg\";\nimport TrumpSvg2 from \"../Assets/trumpIcon2.svg\";\nimport trumpHit from \"../Assets/10-BILLION.mp3\";\n\nconst TrumpIcon = (props) => {\n  const playAudio = () => {\n    new Audio(trumpHit).play();\n  };\n  return (\n    <div>\n      <img\n        onClick={\n          props.clickCallback === null\n            ? null\n            : () => {\n                props.clickCallback();\n                playAudio();\n              }\n        }\n        src={TrumpSvg2}\n        alt=\"Trump icon\"\n        draggable=\"false\"\n        className={`trump-svg ${props.classNameProp}`}\n      />\n    </div>\n  );\n};\nexport default TrumpIcon;\n","import TrumpIcon from \"../Components/TrumpIcon\";\n\nconst getRandomIntNumber = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst createClassNameArray = (numberOfIcons) => {\n  const classNameArray = Array.from({ length: numberOfIcons }, (element) => \"\");\n  classNameArray[getRandomIntNumber(numberOfIcons)] = \"target\";\n  return classNameArray;\n};\n\nexport const getTrumpIcons = (numberOfIcons, clickCallback) => {\n  return createClassNameArray(numberOfIcons).map((className, index) => {\n    if (className === \"target\")\n      return <TrumpIcon classNameProp={className} key={index} clickCallback={clickCallback} />;\n    else {\n      return <TrumpIcon classNameProp={className} key={index} clickCallback={null} />;\n    }\n  });\n};\n","import React, { useState, useEffect } from \"react\";\nimport { getTrumpIcons } from \"../Utils/GameBoardFunctions\";\n\nconst GameBoard = () => {\n  const [targetClicked, setTargetClicked] = useState(0);\n\n  const [iconsJSX, setIconsJSX] = useState(\"\");\n  useEffect(() => {\n    const incrementTargetClicks = () => {\n      setTargetClicked(targetClicked + 1);\n    };\n    console.log(targetClicked);\n    setIconsJSX(getTrumpIcons(20, incrementTargetClicks));\n  }, [targetClicked]);\n\n  return (\n    <div className=\"container\" id=\"game-board-div\">\n      {iconsJSX}\n    </div>\n  );\n};\nexport default GameBoard;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Components/Header\";\nimport Controls from \"./Components/Controls\";\nimport GameBoard from \"./Components/GameBoard\";\n\nconst App = () => {\n  const [cursor, setCursor] = useState(\"unclicked\");\n\n  const changeCursor = () => {\n    setCursor(\"clicked\");\n  };\n\n  useEffect(() => {\n    if (cursor === \"clicked\") {\n      setTimeout(() => {\n        setCursor(\"unclicked\");\n      }, 90);\n    }\n  }, [cursor]);\n\n  return (\n    <div className={`App ${cursor}`} onClick={() => changeCursor()}>\n      <Header />\n      <Controls />\n      <GameBoard />\n    </div>\n  );\n};\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./SCSS/main.css\";\nimport App from \"./App\";\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}